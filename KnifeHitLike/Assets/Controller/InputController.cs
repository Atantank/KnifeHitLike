//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Controller/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""Clicker"",
            ""id"": ""6ef2afa7-3d02-4d0c-a6e1-75deef77e2ba"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""c7f08cae-25fb-4c74-bf87-df6b984df93e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ccd315a0-e275-471d-8ae1-ac7b0b2dd684"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Clicker"",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8978e355-ee26-4076-8505-a8d402208caa"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Clicker"",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Clicker"",
            ""bindingGroup"": ""Clicker"",
            ""devices"": []
        }
    ]
}");
        // Clicker
        m_Clicker = asset.FindActionMap("Clicker", throwIfNotFound: true);
        m_Clicker_Tap = m_Clicker.FindAction("Tap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Clicker
    private readonly InputActionMap m_Clicker;
    private IClickerActions m_ClickerActionsCallbackInterface;
    private readonly InputAction m_Clicker_Tap;
    public struct ClickerActions
    {
        private @InputController m_Wrapper;
        public ClickerActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_Clicker_Tap;
        public InputActionMap Get() { return m_Wrapper.m_Clicker; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ClickerActions set) { return set.Get(); }
        public void SetCallbacks(IClickerActions instance)
        {
            if (m_Wrapper.m_ClickerActionsCallbackInterface != null)
            {
                @Tap.started -= m_Wrapper.m_ClickerActionsCallbackInterface.OnTap;
                @Tap.performed -= m_Wrapper.m_ClickerActionsCallbackInterface.OnTap;
                @Tap.canceled -= m_Wrapper.m_ClickerActionsCallbackInterface.OnTap;
            }
            m_Wrapper.m_ClickerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Tap.started += instance.OnTap;
                @Tap.performed += instance.OnTap;
                @Tap.canceled += instance.OnTap;
            }
        }
    }
    public ClickerActions @Clicker => new ClickerActions(this);
    private int m_ClickerSchemeIndex = -1;
    public InputControlScheme ClickerScheme
    {
        get
        {
            if (m_ClickerSchemeIndex == -1) m_ClickerSchemeIndex = asset.FindControlSchemeIndex("Clicker");
            return asset.controlSchemes[m_ClickerSchemeIndex];
        }
    }
    public interface IClickerActions
    {
        void OnTap(InputAction.CallbackContext context);
    }
}
